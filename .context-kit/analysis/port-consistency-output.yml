port_consistency_analysis:
  timestamp: "2025-10-07T00:00:00Z"
  status: "completed"
  project: "tkr-docusearch"

  compliance_status: "FULLY_COMPLIANT"

  current_allocation:
    total_ports: 3
    compliant: 3
    non_compliant: 0
    conflicts: 0

  port_scheme:
    name: "Standard Port Allocation (8xxx range)"
    range: "8000-8002"
    rationale: "DocuSearch uses standard development ports for simplicity and compatibility with common service defaults (ChromaDB default is 8000)"
    note: "This is SEPARATE from the .context-kit infrastructure which uses 42xxx ports"

  port_inventory:
    allocated:
      - port: 8000
        service: "copyparty"
        type: "File Upload Server + Web UI"
        status: "compliant"
        protocol: "HTTP"
        container: "docusearch-copyparty"
        location:
          docker:
            - "docker/docker-compose.yml (lines 11, 17)"
            - "docker/docker-compose.native-worker.yml (not exposed, only internal)"
            - "docker/Dockerfile.copyparty"
            - "docker/.env (line 23: COPYPARTY_PORT=8000)"
            - "docker/.env.template (line 23: COPYPARTY_PORT=8000)"
          scripts:
            - "scripts/start-all.sh (lines 82, 89, 116, 124, 187)"
            - "scripts/status.sh (lines 54, 95-97, 148, 199)"
            - "scripts/run-worker-native.sh (no direct reference)"
          hooks:
            - "docker/data/copyparty/hooks/on_upload.py (no direct reference, uses WORKER_PORT)"
            - "hooks/on_upload.py (no direct reference)"
            - "hooks/on_delete.py (no direct reference)"
          documentation:
            - "docs/QUICK_START.md (lines 16, 84)"
            - "docs/SCRIPTS.md (references service URLs)"
            - "docs/NATIVE_WORKER_SETUP.md (references upload UI)"
            - "docs/GETTING_STARTED.md"
            - "docs/DEPLOYMENT.md"
            - "README.md"
          ui_source:
            - "src/ui/status_dashboard.js (hardcoded references)"
            - "src/ui/search.js (hardcoded references)"
        environment_vars:
          - "COPYPARTY_PORT (default: 8000)"
          - "CPP_PORT (internal: 8000)"
        usage: "active"
        description: "Primary file upload interface with Copyparty web UI. Handles document uploads and triggers webhooks to worker."

      - port: 8001
        service: "chromadb"
        type: "Vector Database (ChromaDB HTTP API)"
        status: "compliant"
        protocol: "HTTP"
        container: "docusearch-chromadb"
        location:
          docker:
            - "docker/docker-compose.yml (lines 43, 50: external 8001 -> internal 8000)"
            - "docker/docker-compose.native-worker.yml (line 34: explicit 8001:8000)"
            - "docker/.env (line 26: CHROMADB_PORT=8001)"
            - "docker/.env.template (line 26: CHROMADB_PORT=8001)"
          python_source:
            - "src/config/storage_config.py (line 26: default '8001')"
            - "src/storage/chroma_client.py (line 64: default port=8000 for INTERNAL)"
            - "src/processing/worker_webhook.py (line 49: CHROMA_PORT default '8000' INTERNAL)"
            - "src/processing/worker.py (line 43: CHROMA_PORT default '8001')"
            - "src/test_end_to_end.py (line 49: port=8001)"
            - "src/storage/test_real_chromadb.py (line 38: port=8001)"
            - "src/storage/test_storage.py (line 72: port=8000)"
            - "scripts/query-chromadb.py (line 167: default=8001)"
          scripts:
            - "scripts/start-all.sh (lines 82, 89, 116-120, 188)"
            - "scripts/status.sh (lines 59-62, 87-92, 148)"
            - "scripts/run-worker-native.sh (line 45: CHROMA_PORT default 8001)"
          documentation:
            - "docs/QUICK_START.md (line 85)"
            - "docs/SCRIPTS.md"
            - "docs/NATIVE_WORKER_SETUP.md"
            - "src/storage/README.md"
            - "src/storage/QUICK_REFERENCE.md"
            - "src/storage/IMPLEMENTATION_SUMMARY.md"
        environment_vars:
          - "CHROMADB_PORT (external/host: 8001)"
          - "CHROMA_PORT (internal/container: 8000)"
          - "CHROMA_HOST (default: chromadb or localhost)"
        port_mapping: "8001 (host) -> 8000 (container)"
        usage: "active"
        description: "ChromaDB vector database for storing and searching document embeddings. Exposed on host at 8001, runs internally on 8000."
        important_note: "Docker container runs on internal port 8000, exposed to host as 8001"

      - port: 8002
        service: "processing-worker"
        type: "Document Processing Worker + Webhook API"
        status: "compliant"
        protocol: "HTTP"
        container: "docusearch-worker (Docker) OR native process (GPU mode)"
        location:
          docker:
            - "docker/docker-compose.yml (lines 22: WORKER_PORT=8002 env var only)"
            - "docker/docker-compose.native-worker.yml (line 26: WORKER_PORT=8002)"
            - "docker/.env (line 29: WORKER_PORT=8002)"
            - "docker/.env.template (line 29: WORKER_PORT=8002)"
          python_source:
            - "src/api/server.py (line 480: default port=8002)"
            - "src/processing/worker_webhook.py (line 53: WORKER_PORT default '8002')"
            - "hooks/on_upload.py (line 25: WORKER_PORT default '8002')"
            - "hooks/on_delete.py (line 25: WORKER_PORT default '8002')"
            - "docker/data/copyparty/hooks/on_upload.py (line 25: WORKER_PORT default '8002')"
          scripts:
            - "scripts/start-all.sh (lines 82, 131-136, 170-171, 189-190)"
            - "scripts/status.sh (lines 68-73, 115-143, 204)"
            - "scripts/run-worker-native.sh (line 172: binds to 0.0.0.0:8002)"
          documentation:
            - "docs/QUICK_START.md (lines 86-88)"
            - "docs/SCRIPTS.md"
            - "docs/NATIVE_WORKER_SETUP.md"
            - "src/processing/WAVE2_SUMMARY.md"
        environment_vars:
          - "WORKER_PORT (default: 8002)"
          - "WORKER_HOST (copyparty uses this to find worker)"
        usage: "active"
        modes:
          gpu_native: "Native Python process on macOS with Metal/MPS GPU acceleration"
          cpu_docker: "Containerized worker using CPU only"
        description: "Document processing worker with FastAPI server. Receives webhook calls from Copyparty, processes documents, generates embeddings, stores in ChromaDB."

  port_mapping_summary:
    host_to_container:
      "8000": "8000 (copyparty - direct mapping)"
      "8001": "8000 (chromadb - port translation)"
      "8002": "8002 (worker - direct mapping, or native process)"

  issues_found: []

  potential_confusion_points:
    - issue: "ChromaDB port mapping inconsistency"
      description: "ChromaDB container runs on internal port 8000 but is exposed to host as 8001. Python code uses different defaults depending on context."
      locations:
        - "src/storage/chroma_client.py uses port=8000 (for container-internal)"
        - "src/processing/worker_webhook.py uses CHROMA_PORT default '8000' (for container name)"
        - "src/processing/worker.py uses CHROMA_PORT default '8001' (for localhost)"
        - "src/config/storage_config.py uses CHROMA_PORT default '8001' (for host access)"
      resolution: "This is CORRECT behavior - not an issue. Different defaults based on whether code runs inside Docker (port 8000, host 'chromadb') or outside Docker (port 8001, host 'localhost')"
      status: "clarified"

  changes_made: []

  validation:
    manual_inspection: true
    script_run: false
    script_path: "N/A - no port validation script exists for tkr-docusearch project"
    remaining_conflicts: []
    cross_reference_check: "PASS - all port references are consistent"

  architecture_compliance:
    - check: "Port consistency across Docker Compose files"
      status: "PASS"
      details: "docker-compose.yml and docker-compose.native-worker.yml use consistent port definitions"

    - check: "Environment variable usage"
      status: "PASS"
      details: ".env and .env.template define all ports correctly with defaults"

    - check: "Python source code port references"
      status: "PASS"
      details: "All Python code uses environment variables or correct defaults based on deployment context"

    - check: "Script port consistency"
      status: "PASS"
      details: "Management scripts (start-all, stop-all, status) reference correct ports"

    - check: "Documentation accuracy"
      status: "PASS"
      details: "All documentation (QUICK_START, SCRIPTS, NATIVE_WORKER_SETUP) shows correct port numbers"

    - check: "Port conflicts with system services"
      status: "INFO"
      details: "8000-8002 are common development ports, may conflict with other local services"
      recommendation: "Consider implementing port conflict detection at startup"

    - check: "Separation from .context-kit infrastructure"
      status: "PASS"
      details: "DocuSearch ports (8000-8002) are completely separate from .context-kit infrastructure ports (42xxx). No conflicts."

  cross_project_port_allocation:
    docusearch_app:
      range: "8000-8002"
      services: ["copyparty", "chromadb", "worker"]
      purpose: "Main document search application"

    context_kit_infrastructure:
      range: "42000-42999"
      services: ["dashboard:42001", "api:42003", "logging:42002", "etc"]
      purpose: "Development toolkit and project management infrastructure"
      note: "Completely separate from DocuSearch - no conflicts"

  recommendations:
    - priority: "low"
      category: "documentation"
      recommendation: "Add a PORT_ALLOCATION.md document to root directory"
      rationale: "Clarify the distinction between DocuSearch ports (8xxx) and .context-kit ports (42xxx)"

    - priority: "low"
      category: "tooling"
      recommendation: "Create a port validation script in scripts/check-ports.sh"
      rationale: "Similar to .context-kit/scripts/check-ports.sh but for DocuSearch ports"
      example: |
        #!/bin/bash
        # Check if ports 8000, 8001, 8002 are available
        for port in 8000 8001 8002; do
          if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null; then
            echo "ERROR: Port $port is already in use"
            exit 1
          fi
        done
        echo "All ports available"

    - priority: "info"
      category: "container-optimization"
      recommendation: "Consider standardizing ChromaDB port to avoid confusion"
      rationale: "ChromaDB uses 8000 internally but 8001 externally - consider using 8001 everywhere or documenting the mapping more clearly"
      note: "Current setup works correctly, this is just for consistency"

    - priority: "info"
      category: "future-planning"
      recommendation: "Document port allocation strategy in README.md"
      rationale: "Help developers understand why 8000-8002 were chosen and how they relate to service architecture"

  third_party_references:
    note: "The .context-kit/_ref/packages/ directory contains third-party documentation with various port references (ChromaDB examples use 8000, etc). These are reference materials only and do not affect the project's port allocation."
    excluded_from_analysis: true

  summary:
    total_ports_analyzed: 3
    active_ports: 3
    reserved_ports: 0
    compliance_rate: "100%"
    conflicts_detected: 0
    issues_requiring_action: 0
    clarity_note: "Port allocation is consistent and well-documented across the codebase"

  files_analyzed:
    docker_configuration:
      - "docker/docker-compose.yml"
      - "docker/docker-compose.native-worker.yml"
      - "docker/.env"
      - "docker/.env.template"
      - "docker/Dockerfile.copyparty"

    python_source:
      - "src/config/storage_config.py"
      - "src/storage/chroma_client.py"
      - "src/processing/worker_webhook.py"
      - "src/processing/worker.py"
      - "src/api/server.py"
      - "src/test_end_to_end.py"
      - "src/storage/test_real_chromadb.py"
      - "src/storage/test_storage.py"
      - "src/processing/test_wave3_integration.py"

    hooks:
      - "hooks/on_upload.py"
      - "hooks/on_delete.py"
      - "docker/data/copyparty/hooks/on_upload.py"

    scripts:
      - "scripts/start-all.sh"
      - "scripts/stop-all.sh"
      - "scripts/status.sh"
      - "scripts/run-worker-native.sh"
      - "scripts/query-chromadb.py"

    documentation:
      - "README.md"
      - "docs/QUICK_START.md"
      - "docs/SCRIPTS.md"
      - "docs/NATIVE_WORKER_SETUP.md"
      - "docs/GETTING_STARTED.md"
      - "docs/DEPLOYMENT.md"
      - "src/storage/README.md"
      - "src/storage/QUICK_REFERENCE.md"
      - "src/storage/IMPLEMENTATION_SUMMARY.md"
      - "src/processing/WAVE2_SUMMARY.md"
      - "src/ui/README.md"

    ui_source:
      - "src/ui/status_dashboard.js"
      - "src/ui/search.js"

    total_project_files: 32
    excluded_files: "~200 files in .context-kit/_ref/packages/ (third-party documentation)"

  metadata:
    analysis_tool: "port-consistency agent"
    analysis_date: "2025-10-07"
    analyzer: "Claude Code (Sonnet 4.5)"
    project: "tkr-docusearch"
    project_version: "0.9.0"
    port_scheme: "8000-8002 (Standard Development Ports)"
    infrastructure_port_scheme: "42000-42999 (.context-kit infrastructure - separate)"
